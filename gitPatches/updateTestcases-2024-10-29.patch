diff --git a/client/client_test.go b/client/client_test.go
index 7595340..fcfe663 100644
--- a/client/client_test.go
+++ b/client/client_test.go
@@ -174,7 +174,7 @@ func TestNewClient(t *testing.T) {
 		response, err := c.Workflows.Outputs(context.Background(), SG_ORG, "CUSTOM-7OeX", "test-terragrunt")
 		assert.Empty(t, err)
 		assert.Equal(t, "Outputs retrived", response.Msg)
-		assert.Equal(t, "stackguardian-proper-escargot", response.Data.Outputs["id"].(map[string]interface{})["value"].(string))
+		assert.Equal(t, "stackguardian-proper-escargot", response.Data.Outputs["id"]["value"].(string))
 	})
 
 	t.Run("Update stack workflow", func(t *testing.T) {
@@ -245,7 +245,7 @@ func TestNewClient(t *testing.T) {
 			"refeed2-null-resource-tf-JuNs", "refeed-test-nested-stackrunbug")
 		assert.Empty(t, err)
 		assert.Equal(t, "Outputs retrieved", response.Msg)
-		assert.Equal(t, 817,
+		assert.Equal(t, 654,
 			response.Data.Artifacts["orgs/demo-org/wfgrps/refeed-test-nested-stackrunbug/stacks/stack1/wfs/refeed2-null-resource-tf-JuNs/artifacts/tfstate.json"].Size)
 	})
 
@@ -257,8 +257,7 @@ func TestNewClient(t *testing.T) {
 		response, err := c.StackWorkflows.StackWorkflowOutputs(context.Background(), SG_ORG, "stack1",
 			"refeed2-null-resource-tf-JuNs", "refeed-test-nested-stackrunbug")
 		assert.Empty(t, err)
-		assert.Equal(t, "Outputs retrived", response.Msg)
-		assert.Equal(t, float64(13), response.Data.Outputs["message_lengths"].(map[string]interface{})["value"].([]interface{})[0])
+		assert.Equal(t, float64(13), response.Data.Outputs["message_length"]["value"].(float64))
 	})
 
 	// Workflow Runs
@@ -330,7 +329,7 @@ func TestNewClient(t *testing.T) {
 		response, err := c.WorkflowRuns.CreateWorkflowRun(context.Background(),
 			SG_ORG, SG_WF, SG_WF_GROUP, &createWorkflowRunRequest)
 		assert.Empty(t, err)
-		newWfRunName := response.Data.ResourceName
+		newWfRunName := response.Data.GetExtraProperties()["ResourceName"].(string)
 		assert.NotEmpty(t, newWfRunName)
 
 	})
@@ -341,11 +340,10 @@ func TestNewClient(t *testing.T) {
 			option.WithBaseURL(SG_BASE_URL),
 		)
 		approveWfRunRequest := sggosdk.WorkflowRunApproval{
-			Approve:                   true,
-			Message:                   sggosdk.String("Approved"),
-			ReasonForApprovalRequired: "Approval reason",
+			Approve: true,
+			Message: sggosdk.String("Approved"),
 		}
-		_, err := c.WorkflowRuns.ApproveWorkflowRun(context.Background(), SG_ORG, SG_WF, SG_WF_GROUP, SG_WF_RUN,
+		err := c.WorkflowRuns.ApproveWorkflowRun(context.Background(), SG_ORG, SG_WF, SG_WF_GROUP, SG_WF_RUN,
 			&approveWfRunRequest)
 		// We expect an error since the workflow run doesnt have any approvals pending
 		assert.Contains(t, err.Error(), "No approval pending")
@@ -358,9 +356,8 @@ func TestNewClient(t *testing.T) {
 			option.WithBaseURL(SG_BASE_URL),
 		)
 		approveWfRunRequest := sggosdk.WorkflowRunApproval{
-			Approve:                   true,
-			Message:                   sggosdk.String("Approved"),
-			ReasonForApprovalRequired: "Approval reason",
+			Approve: true,
+			Message: sggosdk.String("Approved"),
 		}
 		err := c.StackWorkflowRuns.ApproveStackWorkflowRun(context.Background(), SG_ORG, SG_STACK, SG_STACK_WF, SG_WF_GROUP, SG_STACK_WF_RUN,
 			&approveWfRunRequest)
@@ -397,7 +394,7 @@ func TestNewClient(t *testing.T) {
 			option.WithBaseURL(SG_BASE_URL),
 		)
 
-		_, err := c.WorkflowRuns.CancelWorkflowRun(context.Background(), SG_ORG, SG_WF, SG_WF_GROUP, SG_WF_RUN)
+		err := c.WorkflowRuns.CancelWorkflowRun(context.Background(), SG_ORG, SG_WF, SG_WF_GROUP, SG_WF_RUN)
 		// We expect an error since the workflow run is already failed
 		if err != nil {
 			assert.Contains(t, err.Error(), "Error cancelling Workflow Run "+SG_WF_RUN)
@@ -725,7 +722,7 @@ func TestNewClient(t *testing.T) {
 			option.WithApiKey(API_KEY),
 			option.WithBaseURL(SG_BASE_URL),
 		)
-		workflowGroupName := SG_WF_GROUP + "/1bger5ydab697a4jxe2gu"
+		workflowGroupName := "sg-sdk-go-test/1bger5ydab697a4jxe2gu"
 		updateWorkflowGroupRequest := sggosdk.PatchedWorkflowGroup{
 			// ResourceName: sggosdk.String(workflowGroupName),
 			Description: sggosdk.Optional("updated description"),
@@ -742,7 +739,7 @@ func TestNewClient(t *testing.T) {
 			option.WithApiKey(API_KEY),
 			option.WithBaseURL(SG_BASE_URL),
 		)
-		workflowGroupName := SG_WF_GROUP
+		workflowGroupName := "sg-sdk-go-test"
 		readWorkflowGroupResponse, err := c.WorkflowGroups.ReadWorkflowGroup(context.Background(), SG_ORG, workflowGroupName)
 		assert.Empty(t, err)
 		assert.NotEmpty(t, readWorkflowGroupResponse.Msg)
@@ -754,7 +751,7 @@ func TestNewClient(t *testing.T) {
 			option.WithApiKey(API_KEY),
 			option.WithBaseURL(SG_BASE_URL),
 		)
-		workflowGroupName := SG_WF_GROUP + "/1bger5ydab697a4jxe2gu"
+		workflowGroupName := "sg-sdk-go-test/1bger5ydab697a4jxe2gu"
 		readWorkflowGroupResponse, err := c.WorkflowGroups.ReadWorkflowGroup(context.Background(), SG_ORG, workflowGroupName)
 		assert.Empty(t, err)
 		assert.NotEmpty(t, readWorkflowGroupResponse.Msg)
@@ -778,7 +775,7 @@ func TestNewClient(t *testing.T) {
 			option.WithApiKey(API_KEY),
 			option.WithBaseURL(SG_BASE_URL),
 		)
-		listAllWorkflowGroupResponse, err := c.WorkflowGroups.ListAllChildWorkflowGroups(context.Background(), SG_ORG, SG_WF_GROUP)
+		listAllWorkflowGroupResponse, err := c.WorkflowGroups.ListAllChildWorkflowGroups(context.Background(), SG_ORG, "sg-sdk-go-test")
 		assert.Empty(t, err)
 		assert.NotEmpty(t, listAllWorkflowGroupResponse.Msg)
 		assert.GreaterOrEqual(t, len(listAllWorkflowGroupResponse.Msg), 1)
@@ -789,7 +786,7 @@ func TestNewClient(t *testing.T) {
 			option.WithApiKey(API_KEY),
 			option.WithBaseURL(SG_BASE_URL),
 		)
-		parentWorkflowGroupName := SG_WF_GROUP
+		parentWorkflowGroupName := "sg-sdk-go-test"
 		createWorkflowGroupRequest := sggosdk.WorkflowGroup{
 			Description: sggosdk.String("child workflowGroup description"),
 		}
@@ -816,7 +813,7 @@ func TestNewClient(t *testing.T) {
 			option.WithApiKey(API_KEY),
 			option.WithBaseURL(SG_BASE_URL),
 		)
-		parentWorkflowGroupName := SG_WF_GROUP + "/1bger5ydab697a4jxe2gu"
+		parentWorkflowGroupName := "sg-sdk-go-test/1bger5ydab697a4jxe2gu"
 		createWorkflowGroupRequest := sggosdk.WorkflowGroup{
 			Description: sggosdk.String("child workflowGroup description"),
 		}
@@ -976,17 +973,17 @@ func TestNewClient(t *testing.T) {
 			option.WithBaseURL(SG_BASE_URL),
 		)
 		createPolicyRequest := sggosdk.Policy{
-			ResourceName:              sggosdk.Optional("GoSDKTestPolicyCreate"),
-			Description:               sggosdk.Optional("SDK Test Policy Description"),
-			NumberOfApprovalsRequired: sggosdk.Optional(1),
+			ResourceName:              sggosdk.String("GoSDKTestPolicyCreate"),
+			Description:               sggosdk.String("SDK Test Policy Description"),
+			NumberOfApprovalsRequired: sggosdk.Int(1),
 		}
 		createPolicyResponse, err := c.Policies.CreatePolicy(context.Background(), SG_ORG, &createPolicyRequest)
 		assert.Empty(t, err)
 		assert.NotEmpty(t, createPolicyResponse.Msg)
-		assert.Equal(t, "Policy "+createPolicyRequest.ResourceName.Value+" created", *createPolicyResponse.Msg)
+		assert.Equal(t, "Policy "+*createPolicyRequest.ResourceName+" created", *createPolicyResponse.Msg)
 
 		//TODO: Add response
-		err = c.Policies.DeletePolicy(context.Background(), SG_ORG, createPolicyRequest.ResourceName.Value)
+		err = c.Policies.DeletePolicy(context.Background(), SG_ORG, *createPolicyRequest.ResourceName)
 		assert.Empty(t, err)
 	})
 
