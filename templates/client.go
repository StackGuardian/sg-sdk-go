// This file was auto-generated by Fern from our API Definition.

package templates

import (
	context "context"
	fmt "fmt"
	sgsdkgo "github.com/StackGuardian/sg-sdk-go"
	core "github.com/StackGuardian/sg-sdk-go/core"
	option "github.com/StackGuardian/sg-sdk-go/option"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: core.NewCaller(
			&core.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Create Template or Revision
func (c *Client) CreateTemplateOrRevision(
	ctx context.Context,
	request *sgsdkgo.CreateTemplateOrRevisionRequest,
	opts ...option.RequestOption,
) (*sgsdkgo.TemplateCreatePatchResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.app.stackguardian.io"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/api/v1/templates/"

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())
	headers.Add("x-sg-orgid", fmt.Sprintf("%v", request.SgOrgid))

	var response *sgsdkgo.TemplateCreatePatchResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Read Template
func (c *Client) ReadTemplate(
	ctx context.Context,
	org string,
	template string,
	templateType string,
	opts ...option.RequestOption,
) (*sgsdkgo.TemplateGetResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.app.stackguardian.io"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(
		baseURL+"/api/v1/templatetypes/%v/%v/%v/",
		templateType,
		org,
		template,
	)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *sgsdkgo.TemplateGetResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Delete a template
func (c *Client) DeleteArchiveTemplate(
	ctx context.Context,
	org string,
	template string,
	templateType string,
	opts ...option.RequestOption,
) error {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.app.stackguardian.io"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(
		baseURL+"/api/v1/templatetypes/%v/%v/%v/",
		templateType,
		org,
		template,
	)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodDelete,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
		},
	); err != nil {
		return err
	}
	return nil
}

// Update Template Revision
func (c *Client) UpdateTemplateRevision(
	ctx context.Context,
	org string,
	template string,
	templateType string,
	request *sgsdkgo.PatchedTemplateUpdate,
	opts ...option.RequestOption,
) (*sgsdkgo.TemplateCreatePatchResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.app.stackguardian.io"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(
		baseURL+"/api/v1/templatetypes/%v/%v/%v/",
		templateType,
		org,
		template,
	)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())
	headers.Add("x-sg-orgid", fmt.Sprintf("%v", request.SgOrgid))

	var response *sgsdkgo.TemplateCreatePatchResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPatch,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
