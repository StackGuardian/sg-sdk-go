// This file was auto-generated by Fern from our API Definition.

package templates

import (
	context "context"
	fmt "fmt"
	sgsdkgo "github.com/StackGuardian/sg-sdk-go"
	core "github.com/StackGuardian/sg-sdk-go/core"
	option "github.com/StackGuardian/sg-sdk-go/option"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: core.NewCaller(
			&core.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Read all subscribed templates by an organization
func (c *Client) ReadSubscription(
	ctx context.Context,
	org string,
	// Always use default
	subscription string,
	request *sgsdkgo.ReadSubscriptionRequest,
	opts ...option.RequestOption,
) (*sgsdkgo.GetSubscriptionResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.app.stackguardian.io"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(
		baseURL+"/api/v1/orgs/%v/subscriptions/%v/",
		org,
		subscription,
	)

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *sgsdkgo.GetSubscriptionResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Create Template and its first revision if the template does not exist, otherwise create a new revision of the template
func (c *Client) CreateTemplateRevision(
	ctx context.Context,
	request *sgsdkgo.CreateTemplateRevisionRequest,
	opts ...option.RequestOption,
) (*sgsdkgo.TemplateCreatePatchResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.app.stackguardian.io"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/api/v1/templates/"

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())
	headers.Add("x-sg-orgid", fmt.Sprintf("%v", request.SgOrgid))

	var response *sgsdkgo.TemplateCreatePatchResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Read parent template or its revision
func (c *Client) ReadTemplateRevision(
	ctx context.Context,
	org string,
	template string,
	templateType string,
	request *sgsdkgo.ReadTemplateRevisionRequest,
	opts ...option.RequestOption,
) (*sgsdkgo.TemplateGetResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.app.stackguardian.io"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(
		baseURL+"/api/v1/templatetypes/%v/%v/%v/",
		templateType,
		org,
		template,
	)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())
	headers.Add("x-sg-orgid", fmt.Sprintf("%v", request.SgOrgid))

	var response *sgsdkgo.TemplateGetResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Delete a template revision. A template parent is automatically deleted when all revisions are deleted.
func (c *Client) DeleteTemplateRevision(
	ctx context.Context,
	org string,
	template string,
	templateType string,
	request *sgsdkgo.DeleteTemplateRevisionRequest,
	opts ...option.RequestOption,
) error {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.app.stackguardian.io"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(
		baseURL+"/api/v1/templatetypes/%v/%v/%v/",
		templateType,
		org,
		template,
	)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())
	headers.Add("x-sg-orgid", fmt.Sprintf("%v", request.SgOrgid))

	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodDelete,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
		},
	); err != nil {
		return err
	}
	return nil
}

// Update parent template or its revision
func (c *Client) UpdateTemplateRevision(
	ctx context.Context,
	org string,
	template string,
	templateType string,
	request *sgsdkgo.PatchedTemplateUpdate,
	opts ...option.RequestOption,
) (*sgsdkgo.TemplateCreatePatchResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.app.stackguardian.io"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(
		baseURL+"/api/v1/templatetypes/%v/%v/%v/",
		templateType,
		org,
		template,
	)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())
	headers.Add("x-sg-orgid", fmt.Sprintf("%v", request.SgOrgid))

	var response *sgsdkgo.TemplateCreatePatchResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPatch,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// List all Templates and its revisions created or subscribed by the Organization
func (c *Client) ListAllTemplates(
	ctx context.Context,
	// Type of the template
	templateType sgsdkgo.ListAllTemplatesRequestTemplateType,
	request *sgsdkgo.ListAllTemplatesRequest,
	opts ...option.RequestOption,
) (*sgsdkgo.ListallTemplatesResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.app.stackguardian.io"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/api/v1/templatetypes/%v/templates/listall/", templateType)

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())
	headers.Add("x-sg-orgid", fmt.Sprintf("%v", request.SgOrgid))

	var response *sgsdkgo.ListallTemplatesResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
