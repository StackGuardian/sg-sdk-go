// This file was auto-generated by Fern from our API Definition.

package client

import (
	"context"
	http "net/http"
	"os"
	testing "testing"
	time "time"

	sggosdk "github.com/StackGuardian/sg-sdk-go"
	option "github.com/StackGuardian/sg-sdk-go/option"
	assert "github.com/stretchr/testify/assert"
)

func TestNewClient(t *testing.T) {

	API_KEY := "apikey " + os.Getenv("SG_API_TOKEN")
	SG_ORG := "demo-org"
	SG_WF_GROUP := "sg-sdk-go-test"
	SG_WF := "2aumphefkejtj3bv4q3wo"
	SG_WF_RUN := "3yzuf1izgfw3"
	SG_STACK := "Stack-test"
	SG_STACK_WF := "ansible-Rfde"
	SG_STACK_WF_RUN := "haoc1yepi6p5"
	SG_BASE_URL := os.Getenv("SG_BASE_URL")
	t.Run("default", func(t *testing.T) {
		c := NewClient()
		assert.Empty(t, c.baseURL)
	})

	t.Run("base url", func(t *testing.T) {
		c := NewClient(
			option.WithBaseURL("test.co"),
		)
		assert.Equal(t, "test.co", c.baseURL)
	})

	t.Run("http client", func(t *testing.T) {
		httpClient := &http.Client{
			Timeout: 5 * time.Second,
		}
		c := NewClient(
			option.WithHTTPClient(httpClient),
		)
		assert.Empty(t, c.baseURL)
	})

	t.Run("http header", func(t *testing.T) {
		header := make(http.Header)
		header.Set("X-API-Tenancy", "test")
		c := NewClient(
			option.WithHTTPHeader(header),
		)
		assert.Empty(t, c.baseURL)
		assert.Equal(t, "test", c.header.Get("X-API-Tenancy"))
	})
	// Workflows
	t.Run("get workflow", func(t *testing.T) {
		c := NewClient(
			option.WithApiKey(API_KEY),
			option.WithBaseURL(SG_BASE_URL),
		)
		response, err := c.Workflows.Get(context.Background(), SG_ORG, SG_WF, SG_WF_GROUP)
		_ = response
		assert.Empty(t, err)
	})

	t.Run("ListAll workflow", func(t *testing.T) {
		c := NewClient(
			option.WithApiKey(API_KEY),
			option.WithBaseURL(SG_BASE_URL),
		)
		response, err := c.Workflows.ListAll(context.Background(), SG_ORG, SG_WF_GROUP)
		_ = response
		assert.Empty(t, err)
	})

	// Workflow Runs
	t.Run("ListAll workflow runs", func(t *testing.T) {
		c := NewClient(
			option.WithApiKey(API_KEY),
			option.WithBaseURL(SG_BASE_URL),
		)
		response, err := c.WorkflowRuns.ListAllWorkflowRuns(context.Background(), SG_ORG, SG_WF, SG_WF_GROUP)
		_ = response
		assert.Empty(t, err)
		assert.NotEmpty(t, len(response.Msg))
		// assert.Equal(t, "3obgvp7kycaf", response.Msg[0].ResourceName)
	})

	t.Run("ListAll workflow runs stacks", func(t *testing.T) {
		c := NewClient(
			option.WithApiKey(API_KEY),
			option.WithBaseURL(SG_BASE_URL),
		)
		response, err := c.WorkflowRuns.ListAllWorkflowRunsStack(context.Background(), SG_ORG, SG_STACK, SG_STACK_WF, SG_WF_GROUP)
		status := response.Msg[0].Statuses["pre_0_step"][0].Name
		_ = status
		assert.Empty(t, err)
		assert.Equal(t, "QUEUED", status)
		assert.NotEmpty(t, len(response.Msg[0].Statuses["pre_0_step"]))
	})
	t.Run("Get workflow runs stack", func(t *testing.T) {
		c := NewClient(
			option.WithApiKey(API_KEY),
			option.WithBaseURL(SG_BASE_URL),
		)
		response, err := c.WorkflowRuns.GetWorkflowRunStack(context.Background(), SG_ORG, SG_STACK, SG_STACK_WF, SG_WF_GROUP, SG_STACK_WF_RUN)
		assert.Equal(t, "QUEUED", response.Msg.Statuses["pre_0_step"][0].Name)
		assert.Empty(t, err)

	})

	t.Run("Get workflow runs", func(t *testing.T) {
		c := NewClient(
			option.WithApiKey(API_KEY),
			option.WithBaseURL(SG_BASE_URL),
		)
		response, err := c.WorkflowRuns.GetWorkflowRun(context.Background(), SG_ORG, SG_WF, SG_WF_GROUP, SG_WF_RUN)
		assert.Equal(t, "QUEUED", response.Msg.Statuses["pre_0_step"][0].Name)
		assert.Empty(t, err)

	})

	t.Run("Create workflow runs", func(t *testing.T) {
		c := NewClient(
			option.WithApiKey(API_KEY),
			option.WithBaseURL(SG_BASE_URL),
		)
		createWorkflowRunRequest := sggosdk.WorkflowRun{
			DeploymentPlatformConfig: []*sggosdk.DeploymentPlatformConfig{{
				Kind: sggosdk.DeploymentPlatformConfigKindEnumAwsRbac,
				Config: map[string]interface{}{
					"profileName":   "testAWSConnector",
					"integrationId": "/integrations/testAWSConnector"}}},
			WfType: sggosdk.WfTypeEnumTerraform.Ptr(),
			EnvironmentVariables: []*sggosdk.EnvVars{{Kind: sggosdk.EnvVarsKindEnumPlainText,
				Config: &sggosdk.EnvVarConfig{VarName: "test", TextValue: sggosdk.String("testValue")}}},
			VcsConfig: &sggosdk.VcsConfig{
				IacVcsConfig: &sggosdk.IacVcsConfig{
					IacTemplateId:          sggosdk.String("/stackguardian/aws-s3-demo-website:16"),
					UseMarketplaceTemplate: true,
				},
				IacInputData: &sggosdk.IacInputData{
					SchemaType: sggosdk.IacInputDataSchemaTypeEnumFormJsonschema,
					Data: map[string]interface{}{
						"bucket_region": "eu-central-1",
					},
				},
			},
			UserJobCpu:    sggosdk.Int(512),
			UserJobMemory: sggosdk.Int(1024),
			RunnerConstraints: &sggosdk.RunnerConstraints{
				Type: "shared",
			},
		}

		response, err := c.WorkflowRuns.CreateWorkflowRun(context.Background(),
			SG_ORG, SG_WF, SG_WF_GROUP, &createWorkflowRunRequest)
		_ = response
		assert.Empty(t, err)
		var resourceName string = response.Data.GetExtraProperties()["ResourceName"].(string)
		assert.NotEmpty(t, resourceName)

	})

	t.Run("Approve workflow runs", func(t *testing.T) {
		t.Skip("Skipping Approve workflow runs test since its not idempotent")
		c := NewClient(
			option.WithApiKey(API_KEY),
			option.WithBaseURL(SG_BASE_URL),
		)
		approveWfRunRequest := sggosdk.WorkflowRunApproval{
			Approve: true,
			Message: sggosdk.String("Approved"),
		}
		err := c.WorkflowRuns.ApprovalWorkflowRun(context.Background(), SG_ORG, SG_WF, SG_WF_GROUP, "281118ditoql",
			&approveWfRunRequest)
		assert.Empty(t, err)

	})

}
