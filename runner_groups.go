// This file was auto-generated by Fern from our API Definition.

package api

import (
	fmt "fmt"

	core "github.com/StackGuardian/sg-sdk-go/core"
)

type RunnerGroup struct {
	ResourceName               *core.Optional[string]                 `json:"ResourceName,omitempty" url:"-"`
	Tags                       *core.Optional[[]string]               `json:"Tags,omitempty" url:"-"`
	Description                *core.Optional[string]                 `json:"Description,omitempty" url:"-"`
	MaxNumberOfRunners         *core.Optional[int]                    `json:"MaxNumberOfRunners,omitempty" url:"-"`
	StorageBackendConfig       map[string]interface{}                 `json:"StorageBackendConfig,omitempty" url:"-"`
	IsActive                   *core.Optional[IsArchiveEnum]          `json:"IsActive,omitempty" url:"-"`
	RunControllerRuntimeSource *core.Optional[RuntimeSource]          `json:"RunControllerRuntimeSource,omitempty" url:"-"`
	RunnerToken                *core.Optional[string]                 `json:"RunnerToken,omitempty" url:"-"`
	ApprovalConfig             *core.Optional[map[string]interface{}] `json:"ApprovalConfig,omitempty" url:"-"`
	RunnerRegistrationErrors   *core.Optional[map[string]interface{}] `json:"RunnerRegistrationErrors,omitempty" url:"-"`
}

type RunnerDeregister struct {
	RunnerId             *core.Optional[string]   `json:"RunnerId,omitempty" url:"-"`
	ContainerInstanceIds *core.Optional[[]string] `json:"ContainerInstanceIds,omitempty" url:"-"`
	ForceDeregister      *core.Optional[bool]     `json:"ForceDeregister,omitempty" url:"-"`
}

type ReadRunnerGroupRequest struct {
	GetActiveWorkflows        *bool `json:"-" url:"getActiveWorkflows,omitempty"`
	GetActiveWorkflowsDetails *bool `json:"-" url:"getActiveWorkflowsDetails,omitempty"`
}

type RunnerStatus struct {
	RunnerId             *core.Optional[string]   `json:"RunnerId,omitempty" url:"-"`
	ContainerInstanceIds *core.Optional[[]string] `json:"ContainerInstanceIds,omitempty" url:"-"`
	Status               StatusEnum               `json:"Status" url:"-"`
}

// * `ACTIVE` - ACTIVE
// * `DRAINING` - DRAINING
type StatusEnum string

const (
	StatusEnumActive   StatusEnum = "ACTIVE"
	StatusEnumDraining StatusEnum = "DRAINING"
)

func NewStatusEnumFromString(s string) (StatusEnum, error) {
	switch s {
	case "ACTIVE":
		return StatusEnumActive, nil
	case "DRAINING":
		return StatusEnumDraining, nil
	}
	var t StatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s StatusEnum) Ptr() *StatusEnum {
	return &s
}
